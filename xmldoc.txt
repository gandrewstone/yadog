Any tag is allowed; you can write handlers for them.

The following tags are defined:

TagConst    = "const"           #?? A Constant definition, for example 'const int b' or '#define FOO'
TagVariable = "var"             #?? Variable definition, for example: 'int a'
TagFunction = "fn"              #?? Function definition
TagParam    = "arg"             #?? An argument to a function. Must be a child of TagFunction
TagClass    = "class"           #?? Class definition
TagMethod   = "method"          #?? Class method definition. Must be a child of TagClass
TagField    = "field"           #?? Field (class/structure member) definition. Must be a child of TagClass
TagCtor     = "ctor"            #?? Constructor definition. Must be a child of TagClass
TagFile     = "file"            #?? File node.  All child nodes are defined in this file.
TagDoc      = "doc"
TagSection  = "section"         #?? Section definition.  A section is an arbitrary construct (i.e. not extracted from to the programming language) that you may use to organise your documentation
TagBrief    = "brief"           #?? Brief help.  Must be a child of a ConstructTag tag.
TagDesc     = "desc"            #?? The full documentation of this item.  Must be a child of a ConstructTag tag.
TagDecl     = "decl"            #?? The function declaration, for example: 'foofn(int a, int b)'.  Must be a child of TagFunction

TagRequires = "requires"        #?? This module requires another library (or include file)

TagRef      = "ref"             #?? A reference to another function or class
TagLicense  = "license"         #?? The file's license
TagReturn   = "return"          #?? The return value
TagException = "exception"      #?? A exception that can be raised


Normal Language/Project Tags:

TagVariable = "var"
TagFunction = "fn"
TagClass    = "class"
TagParam    = "arg"
TagClass    = "class"
TagField    = "field"
TagCtor     = "ctor"

TagFile     = "file"


Documentation Tags:

TagBrief    = "brief"
TagDesc     = "desc"


Structure Tags:

TagSection  = "section"
  The section tag can occur at any time to place contained entities within a separate (nestable) section.  This allows you to capture structure that is useful in documentation but not part of your language.  For example, you might have a section "Global Variables" and another section "Constants".
  The same section can be specified multiple times within a file, and in separate files.


Attributes:

name: this names all the entities.  Often this attribute is automatically inserted by the parser by pulling it from the code itself.

Examples: 

# <var name="i">the loop counter</var>
i = 10

#<section name="Constants">
...
#</section>
  

linenum: The line number the tag came from.  This attribute is automatically inserted by the parser.


view: What perspective you are looking at the module from.

values: 
  "interface": The normal user (default)
  "underface": The interface into lower level software; for example, in a graphics editor class the underface could be functions that implement basic draw functionality like a point or line
  "internal": Only used internally

You can specify more than one by comma separating

deprecated:
  "true": This entity (function, class, variable) is deprecated
  "false": (default) It is not deprecated.

type:
  The type of the variable (even in untyped languages, this should be set to the types the parameter can take (comma separated list), or the type of the variable)

base:
  Base classes (if any)
